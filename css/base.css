:root {
  /**
   * Harmonic scale values calculated based on the golden ratio. Replace with
   * a pow() calculation once all browsers support more robust math functions.
   */
   --phi: 1.5;
   --scale-1: calc(1rem * var(--phi));
   --scale-2: calc(var(--scale-1) * var(--phi));
   --scale-3: calc(var(--scale-2) * var(--phi));
   --scale-4: calc(var(--scale-3) * var(--phi));
   --scale-5: calc(var(--scale-4) * var(--phi));
   --scale-half: calc(1rem / var(--phi));
   --scale-quarter: calc(var(--scale-half) * var(--phi));

  /**
   * Color scheme variables all together.
   */
  --black: #2d2d2d;
  --white: #fff;
  --green: #06724d;
  --light-green: #42957c;
  --lighter-green: #83b9a7;
  --lightest-brand: #c1dcd3;
  --dark-green: #011a12;

  /**
   * Algorithm that uses viewpoint units to proportionately scale the
   * base font, while keeping the default value as the minimum.
   */
  --font-serif: 'Lora', serif;
  --font-size-base: calc(1rem + 0.25vw);
  --measure: 64ch;
  --border: 2px var(--dark-green);

  color: var(--black);
  font-family: var(--font-serif);
  font-size: var(--font-size-base);
}

html {
  box-sizing: border-box;
  height: 100vh;
  background-image: linear-gradient(var(--green), var(--white));
}

*, *::before, *::after {
  max-width: var(--measure);
  box-sizing: inherit;

  /**
   * border-style: solid;
   */
}

/**
 * Exception based styling for those elements without a measure width cap.
 */
html, body, div, header, nav, main, footer {
  max-width: none;
}

h1, h2, h3, h4, h5, h6 {
  font-family: 'Amatic SC', sans-serif;
  font-weight: 700;
}

h1, h2, h3, h4, h5, h6 {
  font-size: var(--scale-2);
}

p {
  line-height: var(--scale-1);
}

img {
  max-width: 100%;
}

header > a {
  display: block;
  margin-top: var(--scale-half);
  margin-left: auto;
  margin-right: auto;
  width: 50vw;
}

/**
 * Good Points:
 * Composition over inheritance. Combine simple, independent parts.
 * Add utility classes as they come up. Don't make them all at first.
 * Not relying on media queries anymore.
 * Designing for the web is designing without seeing. Quantum layouts!
 * An element with assymetrical padding is trying to solve something else it shouldnâ€™t.
 * Only set the CSS values needed to achieve the specific layout you are attempting.
 * Exception based thinking with cascading.
 * Layout components should try to solve just one problem.
 *
 * All the nifty CSS saved here.
 */
